name: Update Azure NSG with GitHub Actions IPs

on:
  workflow_dispatch:
  schedule:
    # Run weekly on Sundays at 1:00 AM UTC to keep GitHub IPs updated
    - cron: '0 1 * * 0'

jobs:
  update-nsg:
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: Mossync-n8n-prod
      NSG_NAME: n8n-vm-nsg
      SSH_RULE_NAME: SSH-GitHub-Actions

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Current GitHub Actions IP Ranges
        run: |
          echo "Fetching current GitHub Actions IP ranges..."
          curl -s https://api.github.com/meta > github_meta.json
          
          # Extract Actions IP ranges
          GITHUB_IPS=$(cat github_meta.json | jq -r '.actions[]' | tr '\n' ',' | sed 's/,$//')
          echo "GitHub Actions IP ranges: $GITHUB_IPS"
          echo "GITHUB_IPS=$GITHUB_IPS" >> $GITHUB_ENV
          
          # Also extract git and GitHub ranges for reference
          GIT_IPS=$(cat github_meta.json | jq -r '.git[]' | tr '\n' ',' | sed 's/,$//')
          echo "GitHub Git IP ranges: $GIT_IPS"
          
          # Show all ranges for logging
          echo "All GitHub IP ranges:"
          cat github_meta.json | jq '.actions, .git, .hooks, .web, .api, .pages'

      - name: Check Current NSG Rules
        run: |
          echo "Checking current NSG rules..."
          az network nsg list --resource-group $RESOURCE_GROUP --output table
          
          echo ""
          echo "Current SSH rules in NSG:"
          az network nsg rule list --resource-group $RESOURCE_GROUP --nsg-name $NSG_NAME --query "[?destinationPortRange=='22']" --output table

      - name: Remove Existing GitHub SSH Rules
        run: |
          echo "Removing existing GitHub Actions SSH rules..."
          # Delete existing rule if it exists (ignore errors if it doesn't exist)
          az network nsg rule delete \
            --resource-group $RESOURCE_GROUP \
            --nsg-name $NSG_NAME \
            --name $SSH_RULE_NAME 2>/dev/null || echo "No existing rule to delete"
          
          # Also clean up any numbered rules from previous versions
          for i in {1..10}; do
            az network nsg rule delete \
              --resource-group $RESOURCE_GROUP \
              --nsg-name $NSG_NAME \
              --name "$SSH_RULE_NAME-$i" 2>/dev/null || true
          done

      - name: Create Updated SSH Rule for GitHub Actions
        run: |
          echo "Creating new SSH rule with updated GitHub Actions IP ranges..."
          
          # Create the main SSH rule allowing GitHub Actions IPs
          az network nsg rule create \
            --resource-group $RESOURCE_GROUP \
            --nsg-name $NSG_NAME \
            --name $SSH_RULE_NAME \
            --protocol Tcp \
            --direction Inbound \
            --priority 1000 \
            --source-address-prefixes $GITHUB_IPS \
            --source-port-ranges '*' \
            --destination-address-prefixes '*' \
            --destination-port-ranges 22 \
            --access Allow \
            --description "SSH access for GitHub Actions runners - Auto-updated $(date +%Y-%m-%d)"

      - name: Verify Updated Rules
        run: |
          echo "Verifying updated NSG rules..."
          echo ""
          echo "All SSH rules (port 22) in NSG:"
          az network nsg rule list \
            --resource-group $RESOURCE_GROUP \
            --nsg-name $NSG_NAME \
            --query "[?destinationPortRange=='22']" \
            --output table
          
          echo ""
          echo "Details of GitHub Actions SSH rule:"
          az network nsg rule show \
            --resource-group $RESOURCE_GROUP \
            --nsg-name $NSG_NAME \
            --name $SSH_RULE_NAME \
            --output json | jq '{name, priority, sourceAddressPrefixes, destinationPortRange, access, description}'

      - name: Test SSH Rule Functionality
        run: |
          echo "Testing if current runner IP is allowed..."
          
          # Get current runner's public IP
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Current GitHub Actions runner IP: $RUNNER_IP"
          
          # Check if this IP is in any of the GitHub ranges
          echo "Checking if runner IP matches GitHub ranges..."
          echo "$GITHUB_IPS" | tr ',' '\n' | while read -r range; do
            if [ -n "$range" ]; then
              echo "Checking range: $range"
              # This is a simple check - in practice, you'd need more sophisticated IP range checking
            fi
          done

      - name: Display Security Summary
        run: |
          echo "================================================"
          echo "🔒 NSG Security Update Complete!"
          echo "================================================"
          echo ""
          echo "Summary:"
          echo "  • Resource Group: $RESOURCE_GROUP"
          echo "  • NSG Name: $NSG_NAME"
          echo "  • Rule Name: $SSH_RULE_NAME"
          echo "  • Updated: $(date)"
          echo ""
          echo "Security Status:"
          echo "  ✅ SSH access restricted to GitHub Actions IP ranges only"
          echo "  ✅ Old rules removed and replaced with current ranges"
          echo "  ✅ Rule priority set to 1000 (high priority)"
          echo ""
          echo "GitHub Actions IP Ranges Currently Allowed:"
          echo "$GITHUB_IPS" | tr ',' '\n' | sed 's/^/  • /'
          echo ""
          echo "⚠️  Important Notes:"
          echo "  • This rule blocks SSH access from all other IPs"
          echo "  • Emergency access may require Azure Portal or CLI"
          echo "  • Rule updates automatically weekly"
          echo ""
          echo "================================================"

      - name: Create Backup Emergency Rule (Optional)
        run: |
          echo "Note: If you need emergency SSH access from other IPs:"
          echo "1. Go to Azure Portal > Network Security Groups > $NSG_NAME"
          echo "2. Add temporary rule with higher priority (lower number)"
          echo "3. Remove temporary rule after emergency access"
          echo ""
          echo "CLI Emergency Access Example:"
          echo "az network nsg rule create --resource-group $RESOURCE_GROUP --nsg-name $NSG_NAME --name Emergency-SSH --priority 900 --source-address-prefixes YOUR_IP --destination-port-ranges 22 --access Allow"
