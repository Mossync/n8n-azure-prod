name: Azure VM Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: Mossync-n8n-prod
      LOCATION: westus3
      KEYVAULT_NAME: n8n-keyvault-prod
      SSH_KEY_NAME: n8n-ssh-key
      VM_NAME: n8n-vm
      ADMIN_USERNAME: mossn8nadmin

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Resource Group Exists
        run: |
          az group show --name $RESOURCE_GROUP || az group create --name $RESOURCE_GROUP --location $LOCATION

      - name: Ensure Key Vault Exists
        run: |
          az keyvault show --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP || \
          az keyvault create --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION

      - name: Ensure SSH Key Exists in Key Vault
        run: |
          if ! az keyvault secret show --vault-name $KEYVAULT_NAME --name $SSH_KEY_NAME-public; then
            ssh-keygen -t rsa -b 4096 -N "" -f id_rsa_n8n
            az keyvault secret set --vault-name $KEYVAULT_NAME --name $SSH_KEY_NAME-public --file id_rsa_n8n.pub
            az keyvault secret set --vault-name $KEYVAULT_NAME --name $SSH_KEY_NAME-private --file id_rsa_n8n
          fi

      - name: Retrieve SSH Public Key from Key Vault
        run: |
          az keyvault secret download --vault-name $KEYVAULT_NAME --name $SSH_KEY_NAME-public --file id_rsa_n8n.pub --overwrite
          PUB_KEY=$(cat id_rsa_n8n.pub)
          echo "PUB_KEY<<EOF" >> $GITHUB_ENV
          echo "$PUB_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check if VM exists and Deploy if needed
        run: |
          if az vm show --resource-group $RESOURCE_GROUP --name $VM_NAME >/dev/null 2>&1; then
            echo "VM $VM_NAME already exists. Skipping deployment."
          else
            echo "VM $VM_NAME does not exist. Deploying..."
            DNS_PREFIX=n8n-${{ github.run_id }}
            az deployment group create \
              --resource-group $RESOURCE_GROUP \
              --template-file n8n-vm-template.json \
              --parameters \
                vmName=$VM_NAME \
                adminUsername=$ADMIN_USERNAME \
                adminPasswordOrKey="${{ env.PUB_KEY }}" \
                dnsLabelPrefix=$DNS_PREFIX
          fi

      - name: Get VM Info and Complete Setup
        run: |
          VM_IP=$(az vm show -d -g $RESOURCE_GROUP -n $VM_NAME --query publicIps -o tsv)
          VM_FQDN=$(az vm show -d -g $RESOURCE_GROUP -n $VM_NAME --query fqdns -o tsv)
          echo "VM Public IP: $VM_IP"
          echo "VM FQDN: $VM_FQDN"
          
          # Retrieve SSH private key from Key Vault
          az keyvault secret download --vault-name $KEYVAULT_NAME --name $SSH_KEY_NAME-private --file id_rsa_n8n --overwrite
          chmod 600 id_rsa_n8n
          
          # Wait for VM to be ready (SSH accessible)
          echo "Waiting for VM to be ready..."
          for i in {1..30}; do
            if ssh -i id_rsa_n8n -o StrictHostKeyChecking=no $ADMIN_USERNAME@$VM_IP "echo 'VM is ready'" 2>/dev/null; then
              echo "VM is ready for setup"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 30
          done
          
          # Copy setup files to VM
          echo "Copying setup files to VM..."
          scp -i id_rsa_n8n -o StrictHostKeyChecking=no setup.sh docker-compose.yml backup.sh $ADMIN_USERNAME@$VM_IP:~/
          
          # Run setup with VM FQDN as domain
          echo "Running setup on VM with domain: $VM_FQDN"
          ssh -i id_rsa_n8n -o StrictHostKeyChecking=no $ADMIN_USERNAME@$VM_IP "chmod +x setup.sh && ./setup.sh $VM_FQDN"
          
          # Start containers
          echo "Starting n8n containers..."
          ssh -i id_rsa_n8n -o StrictHostKeyChecking=no $ADMIN_USERNAME@$VM_IP "cd n8n && docker-compose up -d"
          
          echo "n8n setup complete! Access your instance at: https://$VM_FQDN"
